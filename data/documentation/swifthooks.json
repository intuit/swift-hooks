{"metadata":{"modules":[{"name":"SwiftHooks"}],"roleHeading":"Framework","symbolKind":"module","title":"SwiftHooks","role":"collection","externalID":"SwiftHooks"},"topicSections":[{"identifiers":["doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/SyncHook","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/SyncBailHook","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/SyncWaterfallHook","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/SyncLoopHook"],"title":"Synchronous"},{"identifiers":["doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncSeriesHook","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncParallelHook","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncSeriesBailHook","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncSeriesWaterfallHook","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncSeriesLoopHook","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncParallelBailHook"],"title":"Asynchronous"},{"identifiers":["doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/BaseAsyncHook","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/BaseHook","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/BaseSyncHook","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/ConcurrentContext","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/Interceptors","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/LoopInterceptors"],"title":"Classes"},{"identifiers":["doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/Tap"],"title":"Structures"},{"identifiers":["doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncTapInfo","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/HookContext","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/SyncTapInfo"],"title":"Type Aliases"},{"identifiers":["doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/BailResult","doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/LoopResult"],"title":"Enumerations"}],"schemaVersion":{"patch":0,"minor":2,"major":0},"hierarchy":{"paths":[[]]},"abstract":[{"type":"image","identifier":"hooks.png"}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"inlineContent":[{"text":"A little module for plugins, in swift.","type":"text"}],"type":"paragraph"},{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"SwiftHooks is a swift package for enabling plugins, based on "},{"type":"reference","identifier":"https:\/\/github.com\/webpack\/tapable","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"https:\/\/github.com\/intuit\/hooks\/","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A "},{"code":"Hook","type":"codeVoice"},{"type":"text","text":" represents a “pluggable” point in a software model. They provide a mechanism for “tapping” into such points to get updates, or apply additional functionality to some typed object."}],"type":"paragraph"},{"inlineContent":[{"text":"Check out the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide"},{"text":" for tutorials and walkthroughs!","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Variety of built in hook types","anchor":"Variety-of-built-in-hook-types"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"text":"Type","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Behavior"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"Basic","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Executes the taps with no return value"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"Waterfall","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"“Reduce” the result through all the taps","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"Bail"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Retrieve the result of the first tap that handles the calling value"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"Loop","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Execute taps until no taps request the loop be restarted"}],"type":"paragraph"}]]]},{"level":3,"type":"heading","text":"Simple To Use","anchor":"Simple-To-Use"},{"code":["let someHook = SyncHook<Int>()","","someHook.tap(name: \"LoggingPlugin\") { (value: Int) -> Void in","    print(\"new value: \\(value)\")","}","","someHook.call(30)"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"Asynchronous Hooks with Swift 5.5 structured concurrency","anchor":"Asynchronous-Hooks-with-Swift-5.5-structured-concurrency"},{"code":["let asyncHook = AsyncSeriesHook<Int>()","","asyncHook.tap(name: \"AsyncPlugin\") { (value: Int} async -> Void in","    let metaData = await getMetaData()","    print(\"\\(metaData) \\(value)\")","}","","Task {","    await asyncHook.call(30)","}"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"Extensible","anchor":"Extensible"},{"inlineContent":[{"type":"text","text":"Easily create your own hooks by extending the base hooks:"}],"type":"paragraph"},{"code":["class NewHook<Parameters, ReturnType>: BaseSyncHook<Parameters, ReturnType> {","    public func call(_ value: Parameters) -> ReturnType {","        \/\/ call the taps","        for tap in taps { ... }","        ","        return ...","    }","}"],"type":"codeListing","syntax":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swifthooks"]}],"references":{"doc://com.intuit.hooks/documentation/SwiftHooks/SyncBailHook":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/SyncBailHook","navigatorTitle":[{"text":"SyncBailHook","kind":"identifier"}],"title":"SyncBailHook","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SyncBailHook","kind":"identifier"}],"abstract":[{"type":"text","text":"A synchronous hook that calls handlers in order until a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/BailResult\/bail(_:)"},{"type":"text","text":" is returned"},{"type":"text","text":" "},{"text":"and returns the enclosed value","type":"text"}],"url":"\/documentation\/swifthooks\/syncbailhook"},"doc://com.intuit.hooks/documentation/SwiftHooks/BailResult/bail(_:)":{"url":"\/documentation\/swifthooks\/bailresult\/bail(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"bail"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/BailResult\/bail(_:)","title":"BailResult.bail(_:)","abstract":[{"text":"Indicates that a tap of the hook wants the associated value to be used","type":"text"}]},"doc://com.intuit.hooks/documentation/SwiftHooks/AsyncParallelBailHook":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AsyncParallelBailHook","kind":"identifier"}],"type":"topic","url":"\/documentation\/swifthooks\/asyncparallelbailhook","title":"AsyncParallelBailHook","abstract":[{"type":"text","text":"An asynchronous hook that executes all taps at the same time and returns the result"},{"type":"text","text":" "},{"type":"text","text":"of the first tap to return "},{"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/BailResult\/bail(_:)","type":"reference","isActive":true}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncParallelBailHook","kind":"identifier"}],"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncParallelBailHook"},"doc://com.intuit.hooks/documentation/SwiftHooks/Interceptors":{"url":"\/documentation\/swifthooks\/interceptors","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Interceptors","kind":"identifier"}],"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/Interceptors","role":"symbol","abstract":[{"text":"Interceptors are used for introspection or modification of hooks and the tapped implementations","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"Interceptors","kind":"identifier"}],"type":"topic","title":"Interceptors"},"doc://com.intuit.hooks/documentation/SwiftHooks/SyncTapInfo":{"role":"symbol","abstract":[{"type":"text","text":"The TapInfo used for Sync hooks"}],"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/SyncTapInfo","navigatorTitle":[{"kind":"identifier","text":"SyncTapInfo"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"SyncTapInfo"}],"title":"SyncTapInfo","kind":"symbol","url":"\/documentation\/swifthooks\/synctapinfo","type":"topic"},"doc://com.intuit.hooks/documentation/SwiftHooks/AsyncSeriesLoopHook":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AsyncSeriesLoopHook","kind":"identifier"}],"type":"topic","url":"\/documentation\/swifthooks\/asyncseriesloophook","title":"AsyncSeriesLoopHook","abstract":[{"type":"text","text":"An asynchronous hook that runs taps in a loop until all the tapped closure return "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/LoopResult\/continue"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSeriesLoopHook","kind":"identifier"}],"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncSeriesLoopHook"},"doc://com.intuit.hooks/documentation/SwiftHooks/ConcurrentContext":{"navigatorTitle":[{"kind":"identifier","text":"ConcurrentContext"}],"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/ConcurrentContext","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/HookContext"},{"type":"text","text":" wrapped into an actor for access from "},{"type":"codeVoice","code":"async"},{"type":"text","text":" functions"}],"title":"ConcurrentContext","kind":"symbol","url":"\/documentation\/swifthooks\/concurrentcontext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ConcurrentContext"}],"type":"topic","role":"symbol"},"https://github.com/webpack/tapable":{"url":"https:\/\/github.com\/webpack\/tapable","titleInlineContent":[{"type":"text","text":"tapable"}],"identifier":"https:\/\/github.com\/webpack\/tapable","title":"tapable","type":"link"},"doc://com.intuit.hooks/tutorials/User-Guide":{"title":"User Guide","type":"topic","kind":"overview","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide","abstract":[{"type":"text","text":"Learn how to use SwiftHooks"}],"role":"overview","url":"\/tutorials\/user-guide"},"doc://com.intuit.hooks/documentation/SwiftHooks/SyncHook":{"type":"topic","abstract":[{"text":"A synchronous hook that runs taps in order","type":"text"}],"title":"SyncHook","role":"symbol","url":"\/documentation\/swifthooks\/synchook","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SyncHook","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"SyncHook","kind":"identifier"}],"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/SyncHook"},"doc://com.intuit.hooks/documentation/SwiftHooks/LoopResult/continue":{"url":"\/documentation\/swifthooks\/loopresult\/continue","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"`continue`"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/LoopResult\/continue","title":"LoopResult.continue","abstract":[{"text":"Continue to the next tap","type":"text"}]},"doc://com.intuit.hooks/documentation/SwiftHooks/AsyncSeriesBailHook":{"url":"\/documentation\/swifthooks\/asyncseriesbailhook","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSeriesBailHook","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSeriesBailHook","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncSeriesBailHook","title":"AsyncSeriesBailHook","abstract":[{"text":"An asynchronous hook that executes the taps in order","type":"text"},{"text":" ","type":"text"},{"text":"and returns the result of the first tap to return ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/BailResult\/bail(_:)"}]},"doc://com.intuit.hooks/documentation/SwiftHooks/AsyncTapInfo":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncTapInfo","navigatorTitle":[{"text":"AsyncTapInfo","kind":"identifier"}],"title":"AsyncTapInfo","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncTapInfo"}],"abstract":[{"type":"text","text":"The TapInfo used for Async hooks"}],"url":"\/documentation\/swifthooks\/asynctapinfo"},"doc://com.intuit.hooks/documentation/SwiftHooks/HookContext":{"navigatorTitle":[{"kind":"identifier","text":"HookContext"}],"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/HookContext","abstract":[{"type":"text","text":"Context object populated by interceptors before"},{"type":"text","text":" "},{"type":"text","text":"being passed to taps"}],"title":"HookContext","kind":"symbol","url":"\/documentation\/swifthooks\/hookcontext","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"HookContext"}],"type":"topic","role":"symbol"},"doc://com.intuit.hooks/documentation/SwiftHooks/AsyncSeriesWaterfallHook":{"url":"\/documentation\/swifthooks\/asyncserieswaterfallhook","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AsyncSeriesWaterfallHook","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSeriesWaterfallHook","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncSeriesWaterfallHook","title":"AsyncSeriesWaterfallHook","abstract":[{"text":"An asynchronous hook that performs a ","type":"text"},{"type":"codeVoice","code":"reduce"},{"text":" on taps to get one end result","type":"text"}]},"doc://com.intuit.hooks/documentation/SwiftHooks/BailResult":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"BailResult","kind":"identifier"}],"type":"topic","url":"\/documentation\/swifthooks\/bailresult","title":"BailResult","abstract":[{"type":"text","text":"The result of a "},{"code":"Bail","type":"codeVoice"},{"type":"text","text":" hook"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BailResult","kind":"identifier"}],"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/BailResult"},"https://github.com/intuit/hooks/":{"url":"https:\/\/github.com\/intuit\/hooks\/","titleInlineContent":[{"type":"text","text":"hooks"}],"identifier":"https:\/\/github.com\/intuit\/hooks\/","title":"hooks","type":"link"},"doc://com.intuit.hooks/documentation/SwiftHooks/BaseHook":{"url":"\/documentation\/swifthooks\/basehook","role":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BaseHook","kind":"identifier"}],"title":"BaseHook","kind":"symbol","identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/BaseHook","abstract":[{"text":"Base for Hook types that includes interceptor definition and","type":"text"}],"navigatorTitle":[{"text":"BaseHook","kind":"identifier"}]},"doc://com.intuit.hooks/documentation/SwiftHooks/BaseAsyncHook":{"url":"\/documentation\/swifthooks\/baseasynchook","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BaseAsyncHook"}],"kind":"symbol","identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/BaseAsyncHook","abstract":[{"text":"Base Implementation of an asynchronous hook","type":"text"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BaseAsyncHook"}],"title":"BaseAsyncHook"},"doc://com.intuit.hooks/documentation/SwiftHooks/LoopResult":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"LoopResult","kind":"identifier"}],"kind":"symbol","title":"LoopResult","type":"topic","role":"symbol","navigatorTitle":[{"text":"LoopResult","kind":"identifier"}],"url":"\/documentation\/swifthooks\/loopresult","identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/LoopResult","abstract":[{"text":"The result of a ","type":"text"},{"code":"Loop","type":"codeVoice"},{"type":"text","text":" type hook"}]},"hooks.png":{"alt":"Logo","identifier":"hooks.png","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/hooks@2x.png"},{"traits":["2x","dark"],"url":"\/images\/hooks~dark@2x.png"}]},"doc://com.intuit.hooks/documentation/SwiftHooks/SyncLoopHook":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"SyncLoopHook","kind":"identifier"}],"type":"topic","url":"\/documentation\/swifthooks\/syncloophook","title":"SyncLoopHook","abstract":[{"type":"text","text":"A synchronous hook that runs taps in a loop until all the tapped closures return "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/LoopResult\/continue"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SyncLoopHook","kind":"identifier"}],"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/SyncLoopHook"},"doc://com.intuit.hooks/documentation/SwiftHooks/LoopInterceptors":{"navigatorTitle":[{"text":"LoopInterceptors","kind":"identifier"}],"url":"\/documentation\/swifthooks\/loopinterceptors","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LoopInterceptors","kind":"identifier"}],"abstract":[{"text":"Interceptors for hooks that loop, with an additional interceptor that is run on each loop iteration","type":"text"}],"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/LoopInterceptors","kind":"symbol","title":"LoopInterceptors","type":"topic","role":"symbol"},"doc://com.intuit.hooks/documentation/SwiftHooks/Tap":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Tap","kind":"identifier"}],"type":"topic","url":"\/documentation\/swifthooks\/tap","title":"Tap","abstract":[{"type":"text","text":"A Tap object that contains a handler closure for when it is invoked"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Tap","kind":"identifier"}],"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/Tap"},"doc://com.intuit.hooks/documentation/SwiftHooks":{"url":"\/documentation\/swifthooks","title":"SwiftHooks","identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks","abstract":[{"type":"image","identifier":"hooks.png"}],"type":"topic","role":"collection","kind":"symbol"},"doc://com.intuit.hooks/documentation/SwiftHooks/AsyncParallelHook":{"url":"\/documentation\/swifthooks\/asyncparallelhook","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncParallelHook"}],"navigatorTitle":[{"text":"AsyncParallelHook","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncParallelHook","title":"AsyncParallelHook","abstract":[{"text":"An asynchronous hook that calls all the handlers at the same time","type":"text"}]},"doc://com.intuit.hooks/documentation/SwiftHooks/BaseSyncHook":{"title":"BaseSyncHook","url":"\/documentation\/swifthooks\/basesynchook","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BaseSyncHook"}],"type":"topic","identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/BaseSyncHook","kind":"symbol","abstract":[{"type":"text","text":"Base Implementation of a synchronous hook"}],"navigatorTitle":[{"kind":"identifier","text":"BaseSyncHook"}],"role":"symbol"},"doc://com.intuit.hooks/documentation/SwiftHooks/AsyncSeriesHook":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AsyncSeriesHook","kind":"identifier"}],"type":"topic","url":"\/documentation\/swifthooks\/asyncserieshook","title":"AsyncSeriesHook","abstract":[{"type":"text","text":"An asynchronous hook that calls all the handlers in order and waits for completion"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSeriesHook","kind":"identifier"}],"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/AsyncSeriesHook"},"doc://com.intuit.hooks/documentation/SwiftHooks/SyncWaterfallHook":{"url":"\/documentation\/swifthooks\/syncwaterfallhook","title":"SyncWaterfallHook","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SyncWaterfallHook"}],"navigatorTitle":[{"kind":"identifier","text":"SyncWaterfallHook"}],"identifier":"doc:\/\/com.intuit.hooks\/documentation\/SwiftHooks\/SyncWaterfallHook","abstract":[{"type":"text","text":"A synchronous hook that reduces all the handlers into the end result in order of registration"}],"type":"topic","role":"symbol","kind":"symbol"}}}