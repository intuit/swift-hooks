{"schemaVersion":{"patch":0,"minor":2,"major":0},"metadata":{"title":"Interceptors","categoryPathComponent":"User-Guide","role":"project","category":"SwiftHooks"},"sections":[{"chapter":"Interceptors","title":"Interceptors","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle"}]},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"API","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Description","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"interceptCall"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call interceptors trigger when hooks are called and have access to the parameters from the call, and the "},{"code":"HookContext","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"interceptTap","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Tap interceptors will trigger for each tap when a hook is called and have access to the corresponding ","type":"text"},{"code":"Tap","type":"codeVoice"},{"text":" information, and the ","type":"text"},{"code":"HookContext","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"interceptRegister","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Register interceptors will trigger whenever a hook is tapped, and have the opportunity to modify or prevent the "},{"code":"Tap","type":"codeVoice"},{"type":"text","text":" from being added to the hook"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"interceptLoop"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Loop interceptors share the same signature as call interceptors, but are only available for "},{"type":"codeVoice","code":"Loop"},{"type":"text","text":" hooks. They are triggered for each iteration of the loop."}]}]]],"header":"row"}],"kind":"hero","estimatedTimeInMinutes":5},{"tasks":[{"anchor":"Register-Interceptors","title":"Register Interceptors","stepsSection":[{"caption":[],"code":"InterceptRegister.swift","media":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Call ","type":"text"},{"type":"codeVoice","code":"interceptRegister(_:)"},{"text":" on a hook to attach an interceptor","type":"text"}]}]},{"caption":[],"code":"InterceptRegisterTapped.swift","media":null,"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Tap the hook to have the interceptor run, returning "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" will prevent the tap from being added to the hook."}],"type":"paragraph"}]}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Register interceptors run when a hook is tapped, allowing for introspection and modification.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Tap-Interceptors","title":"Tap Interceptors","stepsSection":[{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Call ","type":"text"},{"code":"interceptTap(_:)","type":"codeVoice"},{"text":" on a hook to attach an interceptor","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","code":"InterceptTap.swift"},{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Calling the hook will run the tap interceptor, and the interceptor will receive the ","type":"text"},{"type":"codeVoice","code":"Tap"},{"text":" object, but it cannot be modified.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","code":"InterceptTapTapped.swift"}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Tap interceptors run when a hook is called, allowing for introspection into what taps are being run. The interceptor is invoked for each "},{"type":"codeVoice","code":"Tap"},{"type":"text","text":" added to a hook. If a hook has not been tapped, the interceptor will not be called."}],"type":"paragraph"}]}]},{"anchor":"Call-Interceptors","title":"Call Interceptors","stepsSection":[{"type":"step","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call "},{"code":"interceptCall(_:)","type":"codeVoice"},{"type":"text","text":" on a hook to attach an interceptor"}]}],"media":null,"code":"InterceptCall.swift"},{"type":"step","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Calling the hook will run the call interceptor, and the interceptor will receive the "},{"type":"codeVoice","code":"Parameters"},{"text":" that the tap does.","type":"text"}]}],"media":null,"code":"InterceptCallTapped.swift"}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call interceptors run when a hook is called, allowing for introspection into what arguments are being sent to a tap."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}]},{"anchor":"Loop-Interceptors","title":"Loop Interceptors","stepsSection":[{"media":null,"type":"step","content":[{"inlineContent":[{"text":"Call ","type":"text"},{"type":"codeVoice","code":"interceptLoop(_:)"},{"text":" on a ","type":"text"},{"type":"codeVoice","code":"Loop"},{"text":" hook to attach an interceptor","type":"text"}],"type":"paragraph"}],"caption":[],"code":"InterceptLoop.swift","runtimePreview":null},{"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Calling the hook will run the loop interceptor, and the interceptor will receive the "},{"type":"codeVoice","code":"Parameters"},{"type":"text","text":" that the tap does. The loop interceptor will run for each iteration of the loop."}],"type":"paragraph"}],"caption":[],"code":"InterceptLoopTapped.swift","runtimePreview":null}],"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Loop interceptors run when a hook is called, allowing for introspection into what arguments are being sent to a tap. Loop hooks will call tap interceptors, and loop interceptors on each iteration of the loop."}]}],"mediaPosition":"trailing"}]},{"anchor":"All-Interceptors","title":"All Interceptors","stepsSection":[{"content":[{"inlineContent":[{"text":"Set up interceptors","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","runtimePreview":null,"media":null,"code":"InterceptAll.swift"},{"content":[{"inlineContent":[{"type":"text","text":"Tap and call the hook to see all the interceptors run."}],"type":"paragraph"}],"caption":[],"type":"step","runtimePreview":null,"media":null,"code":"InterceptAllTapped.swift"}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"When using a ","type":"text"},{"type":"codeVoice","code":"Loop"},{"text":" hook, itâ€™s clear to see the order of execution for interceptors.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]}],"kind":"tasks"},{"abstract":[{"type":"text","text":"All taps have an option of the tapping closure to also receive context. Context can be populated by interceptors, so allow more fine grained interaction between plugins."}],"title":"Hook Context","action":{"isActive":true,"identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"type":"reference"},"featuredEyebrow":"Tutorial","kind":"callToAction"}],"kind":"project","hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts","sections":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Nomenclature","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Asynchronous-Variants","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Check-Your-Understanding","kind":"assessment"}]}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Key-Concepts"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Simple-Example"},{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Practical-Example"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Plugin-Architecture"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Register-Interceptors"},{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Tap-Interceptors"},{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Call-Interceptors"},{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Loop-Interceptors"},{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#All-Interceptors"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Interceptors"},{"projects":[{"sections":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide#Tapping-with-Context","kind":"task"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Context"},{"projects":[{"sections":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Generated-IDs","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Supplied-IDs","kind":"task"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Untapping"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide","paths":[["doc:\/\/com.intuit.hooks\/tutorials\/User-Guide","doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage","doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Interceptors"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage"},"references":{"doc://com.intuit.hooks/tutorials/SwiftHooks/HookContextGuide#Tapping-with-Context":{"url":"\/tutorials\/swifthooks\/hookcontextguide#Tapping-with-Context","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide#Tapping-with-Context","title":"Tapping with Context","abstract":[{"text":"All taps have an option of the tapping closure to also receive context. Context can be populated by interceptors, so allow more fine grained interaction between plugins.","type":"text"}]},"InterceptCall.swift":{"fileName":"InterceptCall.swift","identifier":"InterceptCall.swift","type":"file","syntax":"swift","highlights":[],"fileType":"swift","content":["let hook = SyncHook<Int>()","","hook.interceptCall { context, val in","    print(\"Call Interceptor Running \\(val)\")","}"]},"InterceptAll.swift":{"fileName":"InterceptAll.swift","type":"file","fileType":"swift","syntax":"swift","identifier":"InterceptAll.swift","content":["let hook = SyncLoopHook<Int>()","","hook.interceptRegister { (tap: SyncTapInfo) -> SyncTapInfo? in","    \/\/ A new Tap can be returned if modifications are needed","    \/\/ or nil can be returned to prevent the tap from registering","    print(\"Register Interceptor Running\")","    return tap","}","","hook.interceptTap { context, tap in","    print(\"Tap Interceptor Running \\(tap.name)\")","}","","hook.interceptCall { context, val in","    print(\"Call Interceptor Running \\(val)\")","}","","hook.interceptLoop { context, val in","    print(\"Loop Interceptor Running \\(val)\")","}"],"highlights":[]},"InterceptLoopTapped.swift":{"fileName":"InterceptLoop.swift","type":"file","fileType":"swift","syntax":"swift","identifier":"InterceptLoopTapped.swift","content":["let hook = SyncLoopHook<Int>()","","hook.interceptLoop { context, val in","    print(\"Loop Interceptor Running \\(val)\")","}","","var runs = 0","","hook.tap(name: \"SomePlugin\") { context, val in","    guard runs > 0 else { return .restart }","    print(\"Tap Running \\(val)\")","    return .continue","}","","","hook.call(3)","\/\/ Loop Interceptor Running 3","\/\/ Loop Interceptor Running 3","\/\/ Tap Running 3"],"highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Register-Interceptors":{"kind":"section","title":"Register Interceptors","type":"section","role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/interceptors-usage#Register-Interceptors","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Register-Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}]},"InterceptLoop.swift":{"fileName":"InterceptLoop.swift","type":"file","fileType":"swift","syntax":"swift","identifier":"InterceptLoop.swift","content":["let hook = SyncLoopHook<Int>()","","hook.interceptLoop { context, val in","    print(\"Loop Interceptor Running \\(val)\")","}"],"highlights":[]},"doc://com.intuit.hooks/tutorials/User-Guide/Advanced-Usage/Untapping":{"url":"\/tutorials\/user-guide\/advanced-usage\/untapping","abstract":[],"type":"topic","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Untapping","kind":"article","role":"article","title":"Untapping"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts":{"url":"\/tutorials\/swifthooks\/key-concepts","estimatedTime":"5min","type":"topic","kind":"project","role":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts","title":"Key Concepts","abstract":[{"text":"Introduction to SwiftHooks","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#All-Interceptors":{"url":"\/tutorials\/swifthooks\/interceptors-usage#All-Interceptors","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#All-Interceptors","title":"All Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/HookContextGuide":{"title":"Hook Context","type":"topic","kind":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide","estimatedTime":"5min","abstract":[{"type":"text","text":"All taps have an option of the tapping closure to also receive context. Context can be populated by interceptors, so allow more fine grained interaction between plugins."}],"role":"project","url":"\/tutorials\/swifthooks\/hookcontextguide"},"doc://com.intuit.hooks/tutorials/User-Guide/Getting-Started/Plugin-Architecture":{"title":"Plugin Architecture","kind":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Plugin-Architecture","type":"topic","role":"article","abstract":[],"url":"\/tutorials\/user-guide\/getting-started\/plugin-architecture"},"InterceptRegisterTapped.swift":{"fileName":"InterceptRegister.swift","identifier":"InterceptRegisterTapped.swift","type":"file","syntax":"swift","highlights":[{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23}],"fileType":"swift","content":["let hook = SyncHook<Int>()","","hook.interceptRegister { (tap: SyncTapInfo) -> SyncTapInfo? in","    \/\/ A new Tap can be returned if modifications are needed","    \/\/ or nil can be returned to prevent the tap from registering","    print(\"Register Interceptor Running\")","    guard tap.name == \"GoodPlugin\" else { return nil }","    return tap","}","","hook.tap(name: \"GoodPlugin\") { val in","    print(\"GoodPlugin Running \\(val)\")","}","\/\/ Register Interceptor Running","","hook.tap(name: \"BadPlugin\") { val in","    print(\"BadPlugin Running \\(val * 2)\")","}","\/\/ Register Interceptor Running","","","hook.call(3)","\/\/ GoodPlugin Running 3"]},"doc://com.intuit.hooks/tutorials/User-Guide/Advanced-Usage/Interceptors":{"url":"\/tutorials\/user-guide\/advanced-usage\/interceptors","type":"topic","kind":"article","role":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Interceptors","title":"Interceptors","abstract":[]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Call-Interceptors":{"url":"\/tutorials\/swifthooks\/interceptors-usage#Call-Interceptors","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Call-Interceptors","title":"Call Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Untapping#Untapping-Supplied-IDs":{"title":"Untapping Supplied IDs","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Supplied-IDs","type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"All hooks have the ability to remove taps by calling "},{"code":"untap(_:)","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/tutorials\/swifthooks\/untapping#Untapping-Supplied-IDs"},"InterceptRegister.swift":{"fileName":"InterceptRegister.swift","identifier":"InterceptRegister.swift","type":"file","syntax":"swift","highlights":[],"fileType":"swift","content":["let hook = SyncHook<Int>()","","hook.interceptRegister { (tap: SyncTapInfo) -> SyncTapInfo? in","    \/\/ A new Tap can be returned if modifications are needed","    \/\/ or nil can be returned to prevent the tap from registering","    print(\"Register Interceptor Running\")","    guard tap.name == \"GoodPlugin\" else { return nil }","    return tap","}"]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts#Nomenclature":{"url":"\/tutorials\/swifthooks\/key-concepts#Nomenclature","abstract":[{"type":"text","text":"Introduction to SwiftHooks"}],"type":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Nomenclature","kind":"section","role":"pseudoSymbol","title":"Nomenclature"},"doc://com.intuit.hooks/tutorials/User-Guide/Advanced-Usage/Context":{"title":"Context","kind":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Context","type":"topic","role":"article","abstract":[],"url":"\/tutorials\/user-guide\/advanced-usage\/context"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Untapping":{"url":"\/tutorials\/swifthooks\/untapping","abstract":[{"text":"All hooks have the ability to remove taps by calling ","type":"text"},{"type":"codeVoice","code":"untap(_:)"},{"text":".","type":"text"}],"estimatedTime":"2min","type":"topic","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping","kind":"project","role":"project","title":"Untapping"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Plugin-Architecture":{"url":"\/tutorials\/swifthooks\/plugin-architecture","estimatedTime":"5min","type":"topic","kind":"project","role":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture","title":"Plugin Architecture","abstract":[{"type":"text","text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit."}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Plugin-Architecture#Simple-Example":{"title":"Simple Example","type":"section","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Simple-Example","abstract":[{"text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/plugin-architecture#Simple-Example"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Loop-Interceptors":{"url":"\/tutorials\/swifthooks\/interceptors-usage#Loop-Interceptors","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Loop-Interceptors","title":"Loop Interceptors","abstract":[{"type":"text","text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle"}]},"doc://com.intuit.hooks/tutorials/User-Guide/Getting-Started/Key-Concepts":{"title":"Key Concepts","type":"topic","kind":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Key-Concepts","abstract":[],"role":"article","url":"\/tutorials\/user-guide\/getting-started\/key-concepts"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Untapping#Untapping-Generated-IDs":{"title":"Untapping Generated IDs","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Generated-IDs","type":"section","role":"pseudoSymbol","abstract":[{"text":"All hooks have the ability to remove taps by calling ","type":"text"},{"type":"codeVoice","code":"untap(_:)"},{"text":".","type":"text"}],"url":"\/tutorials\/swifthooks\/untapping#Untapping-Generated-IDs"},"InterceptCallTapped.swift":{"fileName":"InterceptCall.swift","identifier":"InterceptCallTapped.swift","type":"file","syntax":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}],"fileType":"swift","content":["let hook = SyncHook<Int>()","","hook.interceptCall { context, val in","    print(\"Call Interceptor Running \\(val)\")","}","","hook.tap(name: \"SomePlugin\") { context, val in","    print(\"Tap Running \\(val)\")","}","","","hook.call(3)","\/\/ Call Interceptor Running 3","\/\/ Tap Running 3"]},"doc://com.intuit.hooks/tutorials/User-Guide":{"title":"User Guide","type":"topic","kind":"overview","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide","abstract":[{"type":"text","text":"Learn how to use SwiftHooks"}],"role":"overview","url":"\/tutorials\/user-guide"},"InterceptTap.swift":{"fileName":"InterceptTap.swift","identifier":"InterceptTap.swift","type":"file","syntax":"swift","highlights":[],"fileType":"swift","content":["let hook = SyncHook<Int>()","","hook.interceptTap { context, tap in","    print(\"Tap Interceptor Running \\(tap.name)\")","}"]},"InterceptAllTapped.swift":{"fileName":"InterceptAll.swift","identifier":"InterceptAllTapped.swift","type":"file","syntax":"swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}],"fileType":"swift","content":["let hook = SyncLoopHook<Int>()","","hook.interceptRegister { (tap: SyncTapInfo) -> SyncTapInfo? in","    \/\/ A new Tap can be returned if modifications are needed","    \/\/ or nil can be returned to prevent the tap from registering","    print(\"Register Interceptor Running\")","    return tap","}","","hook.interceptTap { context, tap in","    print(\"Tap Interceptor Running \\(tap.name)\")","}","","hook.interceptCall { context, val in","    print(\"Call Interceptor Running \\(val)\")","}","","hook.interceptLoop { context, val in","    print(\"Loop Interceptor Running \\(val)\")","}","","var runs = 0","","hook.tap(name: \"SomePlugin\") { context, val in","    guard runs > 0 else { return .restart }","    print(\"Tap Running \\(val)\")","    return .continue","}","\/\/ Register Interceptor Running","","","hook.call(3)","\/\/ Call Interceptor Running 3","\/\/ Tap Interceptor Running SomePlugin","\/\/ Loop Interceptor Running 3","\/\/ Tap Interceptor Running SomePlugin","\/\/ Loop Interceptor Running 3","\/\/ Tap Running 3"]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts#Check-Your-Understanding":{"type":"link","title":"Check Your Understanding","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Check-Your-Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"url":"\/tutorials\/swifthooks\/key-concepts#Check-Your-Understanding"},"InterceptTapTapped.swift":{"fileName":"InterceptTap.swift","type":"file","fileType":"swift","syntax":"swift","identifier":"InterceptTapTapped.swift","content":["let hook = SyncHook<Int>()","","hook.interceptTap { context, tap in","    print(\"Tap Interceptor Running \\(tap.name)\")","}","","hook.tap(name: \"SomePlugin\") { context, val in","    print(\"Tap Running \\(val)\")","}","","","hook.call(3)","\/\/ Interceptor Running SomePlugin","\/\/ Tap Running 3"],"highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage":{"url":"\/tutorials\/swifthooks\/interceptors-usage","estimatedTime":"5min","type":"topic","kind":"project","role":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage","title":"Interceptors","abstract":[{"type":"text","text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Plugin-Architecture#Practical-Example":{"role":"pseudoSymbol","title":"Practical Example","type":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Practical-Example","url":"\/tutorials\/swifthooks\/plugin-architecture#Practical-Example","kind":"section","abstract":[{"text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit.","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Tap-Interceptors":{"title":"Tap Interceptors","type":"section","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Tap-Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/interceptors-usage#Tap-Interceptors"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts#Asynchronous-Variants":{"kind":"section","title":"Asynchronous Variants","type":"section","role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/key-concepts#Asynchronous-Variants","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Asynchronous-Variants","abstract":[{"text":"Introduction to SwiftHooks","type":"text"}]}}}