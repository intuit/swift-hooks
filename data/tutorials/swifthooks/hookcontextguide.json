{"schemaVersion":{"minor":2,"patch":0,"major":0},"metadata":{"category":"SwiftHooks","title":"Hook Context","categoryPathComponent":"User-Guide","role":"project"},"kind":"project","identifier":{"url":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide","interfaceLanguage":"swift"},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"text":"All taps have an option of the tapping closure to also receive context. Context can be populated by interceptors, so allow more fine grained interaction between plugins.","type":"text"}]}],"title":"Hook Context","chapter":"Context","kind":"hero","estimatedTimeInMinutes":5},{"tasks":[{"stepsSection":[{"type":"step","code":"TapVariants.swift","runtimePreview":null,"caption":[],"media":null,"content":[{"inlineContent":[{"text":"Tap and receive context","type":"text"}],"type":"paragraph"}]},{"type":"step","code":"PopulateContext.swift","runtimePreview":null,"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Populate context","type":"text"}]}]},{"type":"step","code":"ConcurrentContext.swift","runtimePreview":null,"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For Async hooks, "},{"type":"codeVoice","code":"[String: Any]"},{"type":"text","text":" is wrapped as an actor for concurrent access."}]}]}],"anchor":"Tapping-with-Context","title":"Tapping with Context","contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Every hook has a variant of ","type":"text"},{"code":"tap","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"tapAsync","type":"codeVoice"},{"text":" that sends the closure the context object. For synchronous hooks the type is ","type":"text"},{"type":"codeVoice","code":"[String: Any]"},{"text":" so any arbitrary information can be included.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia"}]}],"kind":"tasks"},{"featuredEyebrow":"Tutorial","title":"Untapping","kind":"callToAction","abstract":[{"type":"text","text":"All hooks have the ability to remove taps by calling "},{"type":"codeVoice","code":"untap(_:)"},{"type":"text","text":"."}],"action":{"overridingTitle":"Get started","type":"reference","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping","isActive":true}}],"hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts","sections":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Nomenclature","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Asynchronous-Variants","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Check-Your-Understanding","kind":"assessment"}]}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Key-Concepts"},{"projects":[{"sections":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Simple-Example","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Practical-Example","kind":"task"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Plugin-Architecture"},{"projects":[{"sections":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Register-Interceptors","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Tap-Interceptors","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Call-Interceptors","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Loop-Interceptors","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#All-Interceptors","kind":"task"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Interceptors"},{"projects":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide","sections":[{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide#Tapping-with-Context"}]}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Context"},{"projects":[{"sections":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Generated-IDs","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Supplied-IDs","kind":"task"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Untapping"}],"paths":[["doc:\/\/com.intuit.hooks\/tutorials\/User-Guide","doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage","doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Context"]],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide"},"references":{"doc://com.intuit.hooks/tutorials/SwiftHooks/Untapping#Untapping-Supplied-IDs":{"title":"Untapping Supplied IDs","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Supplied-IDs","type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"All hooks have the ability to remove taps by calling "},{"code":"untap(_:)","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/tutorials\/swifthooks\/untapping#Untapping-Supplied-IDs"},"PopulateContext.swift":{"fileType":"swift","syntax":"swift","type":"file","fileName":"Context.swift","identifier":"PopulateContext.swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18}],"content":["let hook = SyncHook<Int>()","","hook.tap(name: \"WithoutContext\") { value in","    print(value)","}","","hook.tap(name: \"WithContext\") { context, value in","    if context[\"someFlag\"] as? Bool == true {","        print(value * 2)","    } else {","        print(value)","    }","}","","hook.interceptTap { context, tap in","    print(\"\\(tap.name) is running\")","    context[\"someFlag\"] = true","}"]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts":{"url":"\/tutorials\/swifthooks\/key-concepts","estimatedTime":"5min","type":"topic","kind":"project","role":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts","title":"Key Concepts","abstract":[{"text":"Introduction to SwiftHooks","type":"text"}]},"doc://com.intuit.hooks/tutorials/User-Guide/Advanced-Usage/Untapping":{"url":"\/tutorials\/user-guide\/advanced-usage\/untapping","abstract":[],"type":"topic","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Untapping","kind":"article","role":"article","title":"Untapping"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts#Nomenclature":{"url":"\/tutorials\/swifthooks\/key-concepts#Nomenclature","abstract":[{"type":"text","text":"Introduction to SwiftHooks"}],"type":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Nomenclature","kind":"section","role":"pseudoSymbol","title":"Nomenclature"},"doc://com.intuit.hooks/tutorials/User-Guide/Getting-Started/Key-Concepts":{"title":"Key Concepts","type":"topic","kind":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Key-Concepts","abstract":[],"role":"article","url":"\/tutorials\/user-guide\/getting-started\/key-concepts"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage":{"url":"\/tutorials\/swifthooks\/interceptors-usage","estimatedTime":"5min","type":"topic","kind":"project","role":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage","title":"Interceptors","abstract":[{"type":"text","text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Register-Interceptors":{"kind":"section","title":"Register Interceptors","type":"section","role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/interceptors-usage#Register-Interceptors","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Register-Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/HookContextGuide#Tapping-with-Context":{"url":"\/tutorials\/swifthooks\/hookcontextguide#Tapping-with-Context","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide#Tapping-with-Context","title":"Tapping with Context","abstract":[{"text":"All taps have an option of the tapping closure to also receive context. Context can be populated by interceptors, so allow more fine grained interaction between plugins.","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Plugin-Architecture":{"url":"\/tutorials\/swifthooks\/plugin-architecture","estimatedTime":"5min","type":"topic","kind":"project","role":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture","title":"Plugin Architecture","abstract":[{"type":"text","text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit."}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts#Check-Your-Understanding":{"title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"type":"link","url":"\/tutorials\/swifthooks\/key-concepts#Check-Your-Understanding","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Check-Your-Understanding"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Loop-Interceptors":{"url":"\/tutorials\/swifthooks\/interceptors-usage#Loop-Interceptors","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Loop-Interceptors","title":"Loop Interceptors","abstract":[{"type":"text","text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Plugin-Architecture#Simple-Example":{"title":"Simple Example","type":"section","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Simple-Example","abstract":[{"text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/plugin-architecture#Simple-Example"},"ConcurrentContext.swift":{"fileType":"swift","syntax":"swift","type":"file","fileName":"Context.swift","identifier":"ConcurrentContext.swift","highlights":[{"line":1},{"line":3},{"line":4}],"content":["let hook = AsyncSeriesHook<Int>()","","hook.tapAsync(name: \"WithConcurrentContext\") { context, value in","    if let flag: Bool = await context[\"someFlag\"], flag {","        print(value * 2)","    } else {","        print(value)","    }","}","","hook.interceptTap { context, tap in","    print(\"\\(tap.name) is running\")","    context[\"someFlag\"] = true","}"]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Untapping#Untapping-Generated-IDs":{"title":"Untapping Generated IDs","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Generated-IDs","type":"section","role":"pseudoSymbol","abstract":[{"text":"All hooks have the ability to remove taps by calling ","type":"text"},{"type":"codeVoice","code":"untap(_:)"},{"text":".","type":"text"}],"url":"\/tutorials\/swifthooks\/untapping#Untapping-Generated-IDs"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts#Asynchronous-Variants":{"kind":"section","title":"Asynchronous Variants","type":"section","role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/key-concepts#Asynchronous-Variants","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Asynchronous-Variants","abstract":[{"text":"Introduction to SwiftHooks","type":"text"}]},"doc://com.intuit.hooks/tutorials/User-Guide/Advanced-Usage/Interceptors":{"url":"\/tutorials\/user-guide\/advanced-usage\/interceptors","type":"topic","kind":"article","role":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Interceptors","title":"Interceptors","abstract":[]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Tap-Interceptors":{"title":"Tap Interceptors","type":"section","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Tap-Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/interceptors-usage#Tap-Interceptors"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Call-Interceptors":{"url":"\/tutorials\/swifthooks\/interceptors-usage#Call-Interceptors","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Call-Interceptors","title":"Call Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Plugin-Architecture#Practical-Example":{"role":"pseudoSymbol","title":"Practical Example","type":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Practical-Example","url":"\/tutorials\/swifthooks\/plugin-architecture#Practical-Example","kind":"section","abstract":[{"text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit.","type":"text"}]},"doc://com.intuit.hooks/tutorials/User-Guide":{"title":"User Guide","type":"topic","kind":"overview","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide","abstract":[{"type":"text","text":"Learn how to use SwiftHooks"}],"role":"overview","url":"\/tutorials\/user-guide"},"TapVariants.swift":{"fileType":"swift","syntax":"swift","type":"file","fileName":"Context.swift","identifier":"TapVariants.swift","highlights":[],"content":["let hook = SyncHook<Int>()","","hook.tap(name: \"WithoutContext\") { value in","    print(value)","}","","hook.tap(name: \"WithContext\") { context, value in","    print(value)","}"]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Untapping":{"url":"\/tutorials\/swifthooks\/untapping","abstract":[{"text":"All hooks have the ability to remove taps by calling ","type":"text"},{"type":"codeVoice","code":"untap(_:)"},{"text":".","type":"text"}],"estimatedTime":"2min","type":"topic","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping","kind":"project","role":"project","title":"Untapping"},"doc://com.intuit.hooks/tutorials/SwiftHooks/HookContextGuide":{"title":"Hook Context","type":"topic","kind":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide","estimatedTime":"5min","abstract":[{"type":"text","text":"All taps have an option of the tapping closure to also receive context. Context can be populated by interceptors, so allow more fine grained interaction between plugins."}],"role":"project","url":"\/tutorials\/swifthooks\/hookcontextguide"},"doc://com.intuit.hooks/tutorials/User-Guide/Getting-Started/Plugin-Architecture":{"title":"Plugin Architecture","kind":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Plugin-Architecture","type":"topic","role":"article","abstract":[],"url":"\/tutorials\/user-guide\/getting-started\/plugin-architecture"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#All-Interceptors":{"url":"\/tutorials\/swifthooks\/interceptors-usage#All-Interceptors","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#All-Interceptors","title":"All Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}]},"doc://com.intuit.hooks/tutorials/User-Guide/Advanced-Usage/Context":{"title":"Context","kind":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Context","type":"topic","role":"article","abstract":[],"url":"\/tutorials\/user-guide\/advanced-usage\/context"}}}