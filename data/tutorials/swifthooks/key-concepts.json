{"identifier":{"url":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":2},"metadata":{"role":"project","category":"SwiftHooks","title":"Key Concepts","categoryPathComponent":"User-Guide"},"hierarchy":{"modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Nomenclature"},{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Asynchronous-Variants"},{"kind":"assessment","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Check-Your-Understanding"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Key-Concepts"},{"projects":[{"sections":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Simple-Example","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Practical-Example","kind":"task"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Plugin-Architecture"},{"projects":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage","sections":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Register-Interceptors","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Tap-Interceptors","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Call-Interceptors","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Loop-Interceptors","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#All-Interceptors","kind":"task"}]}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Interceptors"},{"projects":[{"sections":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide#Tapping-with-Context","kind":"task"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Context"},{"projects":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping","sections":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Generated-IDs","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Supplied-IDs","kind":"task"}]}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Untapping"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide","paths":[["doc:\/\/com.intuit.hooks\/tutorials\/User-Guide","doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started","doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Key-Concepts"]]},"sections":[{"estimatedTimeInMinutes":5,"chapter":"Key Concepts","kind":"hero","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Introduction to SwiftHooks"}]}],"title":"Key Concepts"},{"tasks":[{"stepsSection":[{"type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"“Basic” Hooks just call all of the taps registered to them, without retrieving a return value. These hooks are good for notifying plugins that something has happened."}]}],"caption":[],"code":"BasicHooks.swift"},{"type":"step","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"“Waterfall” Hooks reduce and initial value through all of the taps to retrieve a single resulting value. The calling value is the same type as the return value."}],"type":"paragraph"}],"caption":[],"code":"WaterfallHooks.swift"},{"type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"“Bail” Hooks call taps until a tap returns a "},{"type":"codeVoice","code":"BailResult\/bail(_:)"},{"type":"text","text":" indicating that it handled the result. The calling value and return type can differ."}]}],"caption":[],"code":"BailHooks.swift"},{"type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"“Loop” Hooks call taps in order until a tap returns "},{"type":"codeVoice","code":"LoopResult\/restart"},{"type":"text","text":" where it will restart from the first tap. This will loop until all taps return "},{"type":"codeVoice","code":"LoopResult\/continue"},{"type":"text","text":"."}]}],"caption":[],"code":"LoopHooks.swift"}],"anchor":"Nomenclature","title":"Nomenclature","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"To those new to this project, it might help to go over some terms:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Hook - an extension point in software for internal or external modification","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tap - A registered function to be invoked by a "},{"type":"codeVoice","code":"Hook"}]}]},{"content":[{"inlineContent":[{"text":"Call - The invocation of a ","type":"text"},{"type":"codeVoice","code":"Hook"},{"text":" to execute ","type":"text"},{"type":"codeVoice","code":"Taps"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Plugin - An encapsulation of modifications to apply to ","type":"text"},{"code":"Hooks","type":"codeVoice"}]}]}],"type":"unorderedList"}]}]},{"stepsSection":[{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AsyncSeriesHook"},{"type":"text","text":" vs "},{"type":"codeVoice","code":"AsyncParallelHook"},{"type":"text","text":" Example."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In a situation where some number of plugins need to be notified of a result and perform asynchornous operations, determining whether or not the order of taps executing matters can save time."}]}],"type":"step","code":"AsyncHooks.swift","media":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"code":"AsyncSeriesHook","type":"codeVoice"},{"type":"text","text":" will "},{"code":"await","type":"codeVoice"},{"type":"text","text":" each tap before executing the next tap. When operations take time, this can add up."}]}],"caption":[],"type":"step","code":"AsyncSeriesHook.swift","media":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"code":"AsyncParallelHook","type":"codeVoice"},{"type":"text","text":" will "},{"code":"await","type":"codeVoice"},{"type":"text","text":" for a task group to complete all tasks as they are executed at the same time."}]}],"caption":[],"type":"step","code":"AsyncParallelHook.swift","media":null}],"anchor":"Asynchronous-Variants","title":"Asynchronous Variants","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Asynchronous Hooks have "},{"type":"codeVoice","code":"Series"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Parallel"},{"type":"text","text":" variants (where applicable). Depending on the use case, the choice of hook can make a difference."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}]}],"kind":"tasks"},{"assessments":[{"title":[{"inlineContent":[{"type":"text","text":"What type of hook does not return a value?"}],"type":"paragraph"}],"type":"multiple-choice","content":[],"choices":[{"justification":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Loop"},{"type":"text","text":" hooks do not have a return value, and taps can only react to the call."}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Loop Hooks"}]}],"isCorrect":true},{"justification":[{"type":"paragraph","inlineContent":[{"code":"Bail","type":"codeVoice"},{"text":" hooks will return the result from the first tap that responds with ","type":"text"},{"code":"BailResult\/bail(_:)","type":"codeVoice"},{"text":".","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bail Hooks"}]}],"isCorrect":false},{"justification":[{"inlineContent":[{"type":"codeVoice","code":"Waterfall"},{"text":" hooks will return the result of reducing the calling value through all taps.","type":"text"}],"type":"paragraph"}],"content":[{"inlineContent":[{"text":"Waterfall Hooks","type":"text"}],"type":"paragraph"}],"isCorrect":false}]}],"anchor":"Check-Your-Understanding","kind":"assessments"},{"action":{"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture","isActive":true},"abstract":[{"type":"text","text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit."}],"kind":"callToAction","title":"Plugin Architecture","featuredEyebrow":"Tutorial"}],"kind":"project","references":{"doc://com.intuit.hooks/tutorials/SwiftHooks/Plugin-Architecture#Practical-Example":{"role":"pseudoSymbol","title":"Practical Example","type":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Practical-Example","url":"\/tutorials\/swifthooks\/plugin-architecture#Practical-Example","kind":"section","abstract":[{"text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit.","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#All-Interceptors":{"url":"\/tutorials\/swifthooks\/interceptors-usage#All-Interceptors","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#All-Interceptors","title":"All Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Untapping":{"url":"\/tutorials\/swifthooks\/untapping","abstract":[{"text":"All hooks have the ability to remove taps by calling ","type":"text"},{"type":"codeVoice","code":"untap(_:)"},{"text":".","type":"text"}],"estimatedTime":"2min","type":"topic","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping","kind":"project","role":"project","title":"Untapping"},"AsyncParallelHook.swift":{"content":["let notificationHook = AsyncParallelHook<String>()","","notificationHook.tapAsync(name: \"LoggingPlugin\") { message in","    \/\/ wait 1 second to simulate network time","    try? await Task.sleep(nanoseconds: 1_000_000_000)","}","","notificationHook.tapAsync(name: \"AnotherLoggingPlugin\") { message in","    \/\/ wait 1 second to simulate network time","    try? await Task.sleep(nanoseconds: 1_000_000_000)","}","","","Task {","    await notificationHook.call(\"Test Message\")","    \/\/ task resumes after 1 second","}"],"fileName":"AsyncHooks.swift","type":"file","identifier":"AsyncParallelHook.swift","fileType":"swift","highlights":[{"line":1},{"line":16}],"syntax":"swift"},"AsyncHooks.swift":{"content":["let seriesHook = AsyncSeriesHook<String>()","let parallelHook = AsyncParallelHook<String>()"],"fileName":"AsyncHooks.swift","type":"file","identifier":"AsyncHooks.swift","fileType":"swift","highlights":[],"syntax":"swift"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts":{"url":"\/tutorials\/swifthooks\/key-concepts","estimatedTime":"5min","type":"topic","kind":"project","role":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts","title":"Key Concepts","abstract":[{"text":"Introduction to SwiftHooks","type":"text"}]},"doc://com.intuit.hooks/tutorials/User-Guide":{"title":"User Guide","type":"topic","kind":"overview","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide","abstract":[{"type":"text","text":"Learn how to use SwiftHooks"}],"role":"overview","url":"\/tutorials\/user-guide"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Call-Interceptors":{"url":"\/tutorials\/swifthooks\/interceptors-usage#Call-Interceptors","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Call-Interceptors","title":"Call Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/HookContextGuide":{"title":"Hook Context","type":"topic","kind":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide","estimatedTime":"5min","abstract":[{"type":"text","text":"All taps have an option of the tapping closure to also receive context. Context can be populated by interceptors, so allow more fine grained interaction between plugins."}],"role":"project","url":"\/tutorials\/swifthooks\/hookcontextguide"},"BailHooks.swift":{"content":["struct BasicHooks {","    var syncHook = SyncHook<Int>()","    var asyncSeriesHook = AsyncSeriesHook<Int>()","    var asyncParallelHook = AsyncParallelHook<Int>()","}","","struct WaterfallHooks {","    var syncWaterfall = SyncWaterfallHook<Int>()","    var asyncWaterfall = AsyncSeriesWaterfallHook<Int>()","}","","struct BailHooks {","    var syncBail = SyncBailHook<Int, Bool>()","    var asyncSeriesBail = AsyncSeriesBailHook<Int, Bool>()","    var asyncParallelBail = AsyncParallelBailHook<Int, Bool>()","}"],"fileName":"HookTypes.swift","type":"file","identifier":"BailHooks.swift","fileType":"swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16}],"syntax":"swift"},"doc://com.intuit.hooks/tutorials/SwiftHooks/HookContextGuide#Tapping-with-Context":{"url":"\/tutorials\/swifthooks\/hookcontextguide#Tapping-with-Context","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide#Tapping-with-Context","title":"Tapping with Context","abstract":[{"text":"All taps have an option of the tapping closure to also receive context. Context can be populated by interceptors, so allow more fine grained interaction between plugins.","type":"text"}]},"doc://com.intuit.hooks/tutorials/User-Guide/Advanced-Usage/Context":{"title":"Context","kind":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Context","type":"topic","role":"article","abstract":[],"url":"\/tutorials\/user-guide\/advanced-usage\/context"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Plugin-Architecture#Simple-Example":{"title":"Simple Example","type":"section","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Simple-Example","abstract":[{"text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/plugin-architecture#Simple-Example"},"doc://com.intuit.hooks/tutorials/User-Guide/Getting-Started/Key-Concepts":{"title":"Key Concepts","type":"topic","kind":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Key-Concepts","abstract":[],"role":"article","url":"\/tutorials\/user-guide\/getting-started\/key-concepts"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Untapping#Untapping-Generated-IDs":{"title":"Untapping Generated IDs","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Generated-IDs","type":"section","role":"pseudoSymbol","abstract":[{"text":"All hooks have the ability to remove taps by calling ","type":"text"},{"type":"codeVoice","code":"untap(_:)"},{"text":".","type":"text"}],"url":"\/tutorials\/swifthooks\/untapping#Untapping-Generated-IDs"},"BasicHooks.swift":{"type":"file","syntax":"swift","fileName":"HookTypes.swift","content":["struct BasicHooks {","    var syncHook = SyncHook<Int>()","    var asyncSeriesHook = AsyncSeriesHook<Int>()","    var asyncParallelHook = AsyncParallelHook<Int>()","}"],"identifier":"BasicHooks.swift","highlights":[],"fileType":"swift"},"WaterfallHooks.swift":{"content":["struct BasicHooks {","    var syncHook = SyncHook<Int>()","    var asyncSeriesHook = AsyncSeriesHook<Int>()","    var asyncParallelHook = AsyncParallelHook<Int>()","}","","struct WaterfallHooks {","    var syncWaterfall = SyncWaterfallHook<Int>()","    var asyncWaterfall = AsyncSeriesWaterfallHook<Int>()","}"],"fileName":"HookTypes.swift","type":"file","identifier":"WaterfallHooks.swift","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"syntax":"swift"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Tap-Interceptors":{"title":"Tap Interceptors","type":"section","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Tap-Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/interceptors-usage#Tap-Interceptors"},"AsyncSeriesHook.swift":{"identifier":"AsyncSeriesHook.swift","highlights":[{"line":1},{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"fileName":"AsyncHooks.swift","syntax":"swift","fileType":"swift","content":["let notificationHook = AsyncSeriesHook<String>()","","notificationHook.tapAsync(name: \"LoggingPlugin\") { message in","    \/\/ wait 1 second to simulate network time","    try? await Task.sleep(nanoseconds: 1_000_000_000)","}","","notificationHook.tapAsync(name: \"AnotherLoggingPlugin\") { message in","    \/\/ wait 1 second to simulate network time","    try? await Task.sleep(nanoseconds: 1_000_000_000)","}","","","Task {","    await notificationHook.call(\"Test Message\")","    \/\/ task resumes after 2 seconds","}"],"type":"file"},"doc://com.intuit.hooks/tutorials/User-Guide/Advanced-Usage/Interceptors":{"url":"\/tutorials\/user-guide\/advanced-usage\/interceptors","type":"topic","kind":"article","role":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Interceptors","title":"Interceptors","abstract":[]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Loop-Interceptors":{"url":"\/tutorials\/swifthooks\/interceptors-usage#Loop-Interceptors","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Loop-Interceptors","title":"Loop Interceptors","abstract":[{"type":"text","text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle"}]},"doc://com.intuit.hooks/tutorials/User-Guide/Getting-Started/Plugin-Architecture":{"title":"Plugin Architecture","kind":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Plugin-Architecture","type":"topic","role":"article","abstract":[],"url":"\/tutorials\/user-guide\/getting-started\/plugin-architecture"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Untapping#Untapping-Supplied-IDs":{"title":"Untapping Supplied IDs","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Supplied-IDs","type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"All hooks have the ability to remove taps by calling "},{"code":"untap(_:)","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/tutorials\/swifthooks\/untapping#Untapping-Supplied-IDs"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts#Check-Your-Understanding":{"url":"\/tutorials\/swifthooks\/key-concepts#Check-Your-Understanding","type":"link","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Check-Your-Understanding","title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Plugin-Architecture":{"url":"\/tutorials\/swifthooks\/plugin-architecture","estimatedTime":"5min","type":"topic","kind":"project","role":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture","title":"Plugin Architecture","abstract":[{"type":"text","text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit."}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts#Nomenclature":{"url":"\/tutorials\/swifthooks\/key-concepts#Nomenclature","abstract":[{"type":"text","text":"Introduction to SwiftHooks"}],"type":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Nomenclature","kind":"section","role":"pseudoSymbol","title":"Nomenclature"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage":{"url":"\/tutorials\/swifthooks\/interceptors-usage","estimatedTime":"5min","type":"topic","kind":"project","role":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage","title":"Interceptors","abstract":[{"type":"text","text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle"}]},"doc://com.intuit.hooks/tutorials/User-Guide/Advanced-Usage/Untapping":{"url":"\/tutorials\/user-guide\/advanced-usage\/untapping","abstract":[],"type":"topic","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Untapping","kind":"article","role":"article","title":"Untapping"},"LoopHooks.swift":{"content":["struct BasicHooks {","    var syncHook = SyncHook<Int>()","    var asyncSeriesHook = AsyncSeriesHook<Int>()","    var asyncParallelHook = AsyncParallelHook<Int>()","}","","struct WaterfallHooks {","    var syncWaterfall = SyncWaterfallHook<Int>()","    var asyncWaterfall = AsyncSeriesWaterfallHook<Int>()","}","","struct BailHooks {","    var syncBail = SyncBailHook<Int, Bool>()","    var asyncSeriesBail = AsyncSeriesBailHook<Int, Bool>()","    var asyncParallelBail = AsyncParallelBailHook<Int, Bool>()","}","","struct LoopHooks {","    var syncLoop = SyncLoopHook<Int>()","    var asyncLoop = AsyncSeriesLoopHook<Int>()","}"],"fileName":"HookTypes.swift","type":"file","identifier":"LoopHooks.swift","fileType":"swift","highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}],"syntax":"swift"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Register-Interceptors":{"kind":"section","title":"Register Interceptors","type":"section","role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/interceptors-usage#Register-Interceptors","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Register-Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts#Asynchronous-Variants":{"kind":"section","title":"Asynchronous Variants","type":"section","role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/key-concepts#Asynchronous-Variants","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Asynchronous-Variants","abstract":[{"text":"Introduction to SwiftHooks","type":"text"}]}}}