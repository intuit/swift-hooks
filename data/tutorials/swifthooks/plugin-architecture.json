{"kind":"project","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture"},"metadata":{"title":"Plugin Architecture","categoryPathComponent":"User-Guide","role":"project","category":"SwiftHooks"},"hierarchy":{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide","paths":[["doc:\/\/com.intuit.hooks\/tutorials\/User-Guide","doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started","doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Plugin-Architecture"]],"modules":[{"projects":[{"sections":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Nomenclature","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Asynchronous-Variants","kind":"task"},{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Check-Your-Understanding","kind":"assessment"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Key-Concepts"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Simple-Example"},{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Practical-Example"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Plugin-Architecture"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Register-Interceptors"},{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Tap-Interceptors"},{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Call-Interceptors"},{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Loop-Interceptors"},{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#All-Interceptors"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage"}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Interceptors"},{"projects":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide","sections":[{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide#Tapping-with-Context"}]}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Context"},{"projects":[{"reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping","sections":[{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Generated-IDs"},{"kind":"task","reference":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Supplied-IDs"}]}],"reference":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Untapping"}]},"sections":[{"title":"Plugin Architecture","content":[{"type":"paragraph","inlineContent":[{"text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, rather than having a single delegate for some given class, any number of plugins can tap hooks to supply functionality, or react to events in the lifecycle of the software calling the hooks."}]}],"estimatedTimeInMinutes":5,"kind":"hero","chapter":"Plugin Architecture"},{"tasks":[{"anchor":"Simple-Example","title":"Simple Example","stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the hooks that the car will need."}]}],"code":"CarHooks.swift","media":null,"runtimePreview":null,"caption":[]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"For this example, the "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" will only expose a "},{"type":"codeVoice","code":"speed"},{"type":"text","text":" API to change the speed of the car."}],"type":"paragraph"}],"code":"CarExample.swift","media":null,"runtimePreview":null,"caption":[]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then the hooks can be tapped, in an adhoc manner this couples the tap implementations to the "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" instantiation point, and does not really make this extensible."}]}],"code":"CarAdhoc.swift","media":null,"runtimePreview":null,"caption":[]},{"type":"step","content":[{"inlineContent":[{"text":"Instead, ","type":"text"},{"code":"Car","type":"codeVoice"},{"text":" can be refactored to take plugins as a part of its construction, and the logic pertaining to specific features can be contained in the plugins.","type":"text"}],"type":"paragraph"}],"code":"CarExamplePlugins.swift","media":null,"runtimePreview":null,"caption":[]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"The logic that was previously coupled to ","type":"text"},{"type":"codeVoice","code":"Car"},{"text":" instantiation can now be moved into a plugin.","type":"text"}]}],"code":"CarPlugin.swift","media":null,"runtimePreview":null,"caption":[]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Now "},{"code":"Car","type":"codeVoice"},{"type":"text","text":" can be instantiated with a plugin instead of tapping hooks directly."}],"type":"paragraph"}],"code":"CarWithPlugins.swift","media":null,"runtimePreview":null,"caption":[]}],"contentSection":[{"content":[{"inlineContent":[{"text":"Consider a very barebones vehicle that can only accelerate and brake. Cars can come with many different peripherals, making determining exactly what logic to encode for those many variations complicated.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"By building this with a plugin architecture, the responsibility of connecting to the hardware is delegated to a plugin, rather than in the implementation of the Car itself."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}]},{"anchor":"Practical-Example","title":"Practical Example","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create the hooks for the logger."}]}],"type":"step","runtimePreview":null,"code":"LoggerHooks.swift","media":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create the "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" itself."}]}],"type":"step","runtimePreview":null,"code":"Logger.swift","media":null,"caption":[]},{"content":[{"inlineContent":[{"type":"text","text":"Create plugins"}],"type":"paragraph"}],"type":"step","runtimePreview":null,"code":"ErrorLoggingPlugin.swift","media":null,"caption":[]},{"content":[{"inlineContent":[{"type":"text","text":"Printing logs is not a hard task, but encapsulating functionality for how logging happens for a library, can allow ease of access for other users to onboard."}],"type":"paragraph"}],"type":"step","runtimePreview":null,"code":"RemoteLoggingPlugin.swift","media":null,"caption":[{"inlineContent":[{"text":"In a scenario where logs are sent to some remote server, the formatting of the logs can be solely in a plugin, tapping the ","type":"text"},{"code":"LoggerHooks","type":"codeVoice"},{"text":" so users who want to upload logs only need to include the plugin","type":"text"}],"type":"paragraph"}]}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that the basics of plugin architecture are understood, creating a "},{"code":"Hook","type":"codeVoice"},{"type":"text","text":" based logger is an easy task."}]},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"Hook","type":"codeVoice"},{"text":" based logger will allow any plugin to retrieve and act on log events, rather than requiring all logging happen in one place.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]}],"kind":"tasks"}],"schemaVersion":{"patch":0,"minor":2,"major":0},"references":{"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts#Nomenclature":{"url":"\/tutorials\/swifthooks\/key-concepts#Nomenclature","abstract":[{"type":"text","text":"Introduction to SwiftHooks"}],"type":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Nomenclature","kind":"section","role":"pseudoSymbol","title":"Nomenclature"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Plugin-Architecture":{"url":"\/tutorials\/swifthooks\/plugin-architecture","estimatedTime":"5min","type":"topic","kind":"project","role":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture","title":"Plugin Architecture","abstract":[{"type":"text","text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit."}]},"doc://com.intuit.hooks/tutorials/User-Guide/Advanced-Usage/Untapping":{"url":"\/tutorials\/user-guide\/advanced-usage\/untapping","abstract":[],"type":"topic","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Untapping","kind":"article","role":"article","title":"Untapping"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Register-Interceptors":{"kind":"section","title":"Register Interceptors","type":"section","role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/interceptors-usage#Register-Interceptors","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Register-Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Untapping#Untapping-Generated-IDs":{"title":"Untapping Generated IDs","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Generated-IDs","type":"section","role":"pseudoSymbol","abstract":[{"text":"All hooks have the ability to remove taps by calling ","type":"text"},{"type":"codeVoice","code":"untap(_:)"},{"text":".","type":"text"}],"url":"\/tutorials\/swifthooks\/untapping#Untapping-Generated-IDs"},"doc://com.intuit.hooks/tutorials/User-Guide":{"title":"User Guide","type":"topic","kind":"overview","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide","abstract":[{"type":"text","text":"Learn how to use SwiftHooks"}],"role":"overview","url":"\/tutorials\/user-guide"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts#Check-Your-Understanding":{"title":"Check Your Understanding","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Check-Your-Understanding","url":"\/tutorials\/swifthooks\/key-concepts#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"type":"link"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#All-Interceptors":{"url":"\/tutorials\/swifthooks\/interceptors-usage#All-Interceptors","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#All-Interceptors","title":"All Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/HookContextGuide#Tapping-with-Context":{"url":"\/tutorials\/swifthooks\/hookcontextguide#Tapping-with-Context","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide#Tapping-with-Context","title":"Tapping with Context","abstract":[{"text":"All taps have an option of the tapping closure to also receive context. Context can be populated by interceptors, so allow more fine grained interaction between plugins.","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Plugin-Architecture#Simple-Example":{"title":"Simple Example","type":"section","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Simple-Example","abstract":[{"text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/plugin-architecture#Simple-Example"},"doc://com.intuit.hooks/tutorials/User-Guide/Getting-Started/Plugin-Architecture":{"title":"Plugin Architecture","kind":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Plugin-Architecture","type":"topic","role":"article","abstract":[],"url":"\/tutorials\/user-guide\/getting-started\/plugin-architecture"},"CarWithPlugins.swift":{"fileType":"swift","content":["func main() {","    var car = Car(plugins: [CarLoggerPlugin()])","","    car.speed = 30","    \/\/ Accelerating to 30","    car.speed = 22","    \/\/ Turning on brake lights","    \/\/ Accelerating to 22","}"],"identifier":"CarWithPlugins.swift","highlights":[],"syntax":"swift","fileName":"CarUse.swift","type":"file"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts#Asynchronous-Variants":{"kind":"section","title":"Asynchronous Variants","type":"section","role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/key-concepts#Asynchronous-Variants","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts#Asynchronous-Variants","abstract":[{"text":"Introduction to SwiftHooks","type":"text"}]},"doc://com.intuit.hooks/tutorials/User-Guide/Advanced-Usage/Interceptors":{"url":"\/tutorials\/user-guide\/advanced-usage\/interceptors","type":"topic","kind":"article","role":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Interceptors","title":"Interceptors","abstract":[]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Loop-Interceptors":{"url":"\/tutorials\/swifthooks\/interceptors-usage#Loop-Interceptors","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Loop-Interceptors","title":"Loop Interceptors","abstract":[{"type":"text","text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle"}]},"CarAdhoc.swift":{"fileType":"swift","content":["func main() {","    var car = Car()","","    car.hooks.brake.tap(name: \"logging-brake-hook\") {","        print(\"Turning on brake lights\")","    }","","    car.hooks.accelerate.tap(name: \"logging-accelerate-hook\") { speed in","        print(\"Accelerating to \\(speed)\")","    }","","    car.speed = 30","    \/\/ Accelerating to 30","    car.speed = 22","    \/\/ Turning on brake lights","    \/\/ Accelerating to 22","}"],"identifier":"CarAdhoc.swift","highlights":[],"syntax":"swift","fileName":"CarUse.swift","type":"file"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Untapping#Untapping-Supplied-IDs":{"title":"Untapping Supplied IDs","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping#Untapping-Supplied-IDs","type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"All hooks have the ability to remove taps by calling "},{"code":"untap(_:)","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/tutorials\/swifthooks\/untapping#Untapping-Supplied-IDs"},"ErrorLoggingPlugin.swift":{"fileType":"swift","content":["\/\/\/ Simple ``LoggerPlugin`` that transforms swift errors before logging","class ErrorLoggingPlugin: LoggerPlugin {","    func apply(logger: Logger) {","        logger.hooks.error.tap(name: \"ErrorLoggingPlugin\") { errorLog in","            switch errorLog {","            case .error(let error):","                print(error.localizedDescription)","            case .message(let message):","                print(message)","            }","        }","    }","}"],"identifier":"ErrorLoggingPlugin.swift","highlights":[],"syntax":"swift","fileName":"ErrorLoggingPlugin.swift","type":"file"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Plugin-Architecture#Practical-Example":{"role":"pseudoSymbol","title":"Practical Example","type":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Plugin-Architecture#Practical-Example","url":"\/tutorials\/swifthooks\/plugin-architecture#Practical-Example","kind":"section","abstract":[{"text":"SwiftHooks can be used adhoc, and work well at it, the main use case is to enable a plugin architecture. Plugin architecture can be perceived as similar to the delegate patterns frequently used in iOS frameworks, such as UIKit.","type":"text"}]},"doc://com.intuit.hooks/tutorials/SwiftHooks/Untapping":{"url":"\/tutorials\/swifthooks\/untapping","abstract":[{"text":"All hooks have the ability to remove taps by calling ","type":"text"},{"type":"codeVoice","code":"untap(_:)"},{"text":".","type":"text"}],"estimatedTime":"2min","type":"topic","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Untapping","kind":"project","role":"project","title":"Untapping"},"doc://com.intuit.hooks/tutorials/SwiftHooks/HookContextGuide":{"title":"Hook Context","type":"topic","kind":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/HookContextGuide","estimatedTime":"5min","abstract":[{"type":"text","text":"All taps have an option of the tapping closure to also receive context. Context can be populated by interceptors, so allow more fine grained interaction between plugins."}],"role":"project","url":"\/tutorials\/swifthooks\/hookcontextguide"},"Logger.swift":{"fileType":"swift","content":["protocol LoggerPlugin {","    func apply(logger: Logger)","}","","class Logger {","    \/\/\/ The hooks that plugins can tap into","    let hooks = LoggerHooks()","","    \/\/\/ Create a new ``Logger`` with the given plugins","    \/\/\/ - Parameter plugins: Plugins to apply to this ``Logger``","    init(_ plugins: [LoggerPlugin]) {","        for plugin in plugins { plugin.apply(logger: self) }","    }","","    \/\/\/ Log an info level message","    \/\/\/ - Parameter message: The message to log","    func info(_ message: String) {","        hooks.info.call(message)","    }","","    \/\/\/ Log an warning level message","    \/\/\/ - Parameter message: The message to log","    func warn(_ message: String) {","        hooks.warn.call(message)","    }","","    \/\/\/ Log an error level message","    \/\/\/ - Parameter message: The message to log","    func error(_ message: String) {","        hooks.error.call(.message(message))","    }","","    \/\/\/ Log an error level message","    \/\/\/ - Parameter error: The ``Error`` to log","    func error(_ error: Error) {","        hooks.error.call(.error(error))","    }","}"],"identifier":"Logger.swift","highlights":[],"syntax":"swift","fileName":"Logger.swift","type":"file"},"CarPlugin.swift":{"fileType":"swift","content":["class CarLoggerPlugin: CarPlugin {","    func apply(car: Car) {","        car.hooks.brake.tap(name: \"logging-brake-hook\") {","            print(\"Turning on brake lights\")","        }","","        car.hooks.accelerate.tap(name: \"logging-accelerate-hook\") { speed in","            print(\"Accelerating to \\(speed)\")","        }","    }","}"],"identifier":"CarPlugin.swift","highlights":[],"syntax":"swift","fileName":"CarLoggerPlugin.swift","type":"file"},"doc://com.intuit.hooks/tutorials/User-Guide/Getting-Started/Key-Concepts":{"title":"Key Concepts","type":"topic","kind":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Getting-Started\/Key-Concepts","abstract":[],"role":"article","url":"\/tutorials\/user-guide\/getting-started\/key-concepts"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Key-Concepts":{"url":"\/tutorials\/swifthooks\/key-concepts","estimatedTime":"5min","type":"topic","kind":"project","role":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Key-Concepts","title":"Key Concepts","abstract":[{"text":"Introduction to SwiftHooks","type":"text"}]},"doc://com.intuit.hooks/tutorials/User-Guide/Advanced-Usage/Context":{"title":"Context","kind":"article","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/User-Guide\/Advanced-Usage\/Context","type":"topic","role":"article","abstract":[],"url":"\/tutorials\/user-guide\/advanced-usage\/context"},"LoggerHooks.swift":{"fileType":"swift","highlights":[],"identifier":"LoggerHooks.swift","content":["enum ErrorLog {","    case error(_ error: Error)","    case message(_ message: String)","}","","struct LoggerHooks {","    let info = SyncHook<String>()","    let warn = SyncHook<String>()","    let error = SyncHook<ErrorLog>()","}"],"fileName":"LoggerHooks.swift","type":"file","syntax":"swift"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Call-Interceptors":{"url":"\/tutorials\/swifthooks\/interceptors-usage#Call-Interceptors","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Call-Interceptors","title":"Call Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}]},"CarHooks.swift":{"fileType":"swift","highlights":[],"identifier":"CarHooks.swift","content":["struct CarHooks {","    let brake = SyncHook<Void>()","    let accelerate = SyncHook<Int>()","}"],"fileName":"CarHooks.swift","type":"file","syntax":"swift"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage#Tap-Interceptors":{"title":"Tap Interceptors","type":"section","kind":"section","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage#Tap-Interceptors","abstract":[{"text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/swifthooks\/interceptors-usage#Tap-Interceptors"},"CarExample.swift":{"fileType":"swift","highlights":[],"identifier":"CarExample.swift","content":["class Car {","    let hooks = CarHooks()","","    var speed: Int = 0 {","        set {","            if newValue < speed {","                hooks.brake.call()","            }","","            speed = newValue","            hooks.accelerate.call(newValue)","        }","    }","}"],"fileName":"Car.swift","type":"file","syntax":"swift"},"CarExamplePlugins.swift":{"fileType":"swift","highlights":[],"identifier":"CarExamplePlugins.swift","content":["class Car {","    let hooks = CarHooks()","","    public init(plugins: [CarPlugin]) {","        for plugin in plugins { plugin.apply(car: self) }","    }","","    var speed: Int = 0 {","        set {","            if newValue < speed {","                hooks.brake.call()","            }","","            speed = newValue","            hooks.accelerate.call(newValue)","        }","    }","}","","public protocol CarPlugin {","    func apply(car: Car)","}"],"fileName":"Car.swift","type":"file","syntax":"swift"},"RemoteLoggingPlugin.swift":{"fileType":"swift","highlights":[],"identifier":"RemoteLoggingPlugin.swift","content":["\/\/\/ Plugin to send info log messages to a remote logging server","class RemoteLoggingPlugin: LoggerPlugin {","    func apply(logger: Logger) {","        logger.hooks.info.tap(name: \"RemoteLoggingPlugin\") { sendMessageToServer(\"[info]: \\($0)\") }","        logger.hooks.warn.tap(name: \"RemoteLoggingPlugin\") { sendMessageToServer(\"[warn]: \\($0)\") }","        logger.hooks.error.tap(name: \"RemoteLoggingPlugin\") { errorLog in","            switch errorLog {","            case .error(let error):","                sendMessageToServer(\"[error]: \\(error.localizedDescription)\")","            case .message(let message):","                sendMessageToServer(\"[error]: \\(message)\")","            }","        }","    }","","    func sendMessageToServer(_ message: String) {","        Task {","            \/\/ Send logs to logging server","        }","    }","}"],"fileName":"RemoteLoggingPlugin.swift","type":"file","syntax":"swift"},"doc://com.intuit.hooks/tutorials/SwiftHooks/Interceptors-Usage":{"url":"\/tutorials\/swifthooks\/interceptors-usage","estimatedTime":"5min","type":"topic","kind":"project","role":"project","identifier":"doc:\/\/com.intuit.hooks\/tutorials\/SwiftHooks\/Interceptors-Usage","title":"Interceptors","abstract":[{"type":"text","text":"Every Hook provides the capability to register interceptor functions for different parts of the Hook lifecycle"}]}}}